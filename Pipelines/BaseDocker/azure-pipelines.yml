# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  corepath: 'Pipelines/BaseDocker/EventHorizont/EventHorizont.sln'
  dockerfilepath : 'Pipelines/BaseDocker/EventHorizont/VoyagerApi/Dockerfile'
  DOCKER_REGISTRY : 'wister'

trigger:
- develop


stages:

    - stage: 'BuildSolution'
      pool:
        vmImage: 'ubuntu-latest'
      jobs:
        - job: Build
          steps:
              - task: DotNetCoreCLI@2
                displayName: 'Dotnet Restore'
                inputs:
                  command: 'restore'
                  projects: '$(corepath)'
                  configuration: $(buildConfiguration)
                
              - task: DotNetCoreCLI@2
                displayName: 'Dotnet Build'
                inputs:
                  command: 'build'
                  projects: '$(corepath)'
                  configuration: $(buildConfiguration)

        - job: Test
          dependsOn:
            - build
          steps:
              - task: DotNetCoreCLI@2
                displayName: 'Dotnet Test'
                inputs:
                  command: 'test'
                  projects: '$(corepath)'
                  configuration: $(buildConfiguration)

        - job: Publish
          dependsOn:
            - Test
          steps:
              - task: DotNetCoreCLI@2
                displayName: 'Dotnet Publish'
                inputs:
                  command: 'publish'
                  projects: '$(corepath)'
                  configuration: $(buildConfiguration)
                  arguments: '--configuration debug --output $(Build.ArtifactStagingDirectory)'   

        - job: Docker
          dependsOn:
            - Test
          steps:
                                
              - task: DockerCompose@0
                displayName: 'Docker Compose Build'
                inputs:
                  action: Build services
                  containerregistrytype: 'Container Registry'
                  dockerRegistryEndpoint: 'WisterDR'
                  dockerComposeFile: '**/Docker-compose.yml'
                  qualifyImageNames: true
                  additionalImageTags: $(Build.BuildId)

              - task: DockerCompose@0
                displayName: 'Docker Compose Push'
                inputs:
                  action: Push services
                  containerregistrytype: 'Container Registry'
                  dockerRegistryEndpoint: 'WisterDR'
                  dockerComposeFile: '**/Docker-compose.yml'
                  qualifyImageNames: true
                  additionalImageTags: $(Build.BuildId)
